/**
 * Docket API
 * Docket API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: development@docket.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import ClientError from '../model/ClientError';
import InlineResponse2004 from '../model/InlineResponse2004';
/**
* Microsoft service.
* @module api/MicrosoftApi
* @version 1.0.0
*/

export default class MicrosoftApi {
  /**
  * Constructs a new MicrosoftApi. 
  * @alias module:api/MicrosoftApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }
  /**
   * Get Microsoft OAuth URL
   * Get Microsoft OAuth URL
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
   */


  getMicrosoftOAuthUrlWithHttpInfo() {
    let postBody = null;
    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/vnd.api+json'];
    let returnType = InlineResponse2004;
    return this.apiClient.callApi('/microsoft/oauth-url', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Get Microsoft OAuth URL
   * Get Microsoft OAuth URL
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}
   */


  getMicrosoftOAuthUrl() {
    return this.getMicrosoftOAuthUrlWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  }
  /**
   * Get Microsoft access tokens
   * Get Microsoft access tokens
   * @param {String} code Code
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  microsoftGetAccessTokensWithHttpInfo(code) {
    let postBody = null; // verify the required parameter 'code' is set

    if (code === undefined || code === null) {
      throw new Error("Missing the required parameter 'code' when calling microsoftGetAccessTokens");
    }

    let pathParams = {};
    let queryParams = {
      'code': code
    };
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearerAuth'];
    let contentTypes = [];
    let accepts = ['application/vnd.api+json'];
    let returnType = null;
    return this.apiClient.callApi('/microsoft/tokens', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Get Microsoft access tokens
   * Get Microsoft access tokens
   * @param {String} code Code
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */


  microsoftGetAccessTokens(code) {
    return this.microsoftGetAccessTokensWithHttpInfo(code).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
  /**
   * List Microsoft calendars
   * List microsoft calendars
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
   */


  microsoftListCalendarsWithHttpInfo() {
    let postBody = null;
    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearerAuth'];
    let contentTypes = [];
    let accepts = ['application/vnd.api+json'];
    let returnType = InlineResponse2004;
    return this.apiClient.callApi('/microsoft/calendars', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * List Microsoft calendars
   * List microsoft calendars
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}
   */


  microsoftListCalendars() {
    return this.microsoftListCalendarsWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  }
  /**
   * List Microsoft events by calendar ID
   * List Microsoft events by calendar ID
   * @param {String} calendarId Calendar ID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
   */


  microsoftListEventsByCalendarIdWithHttpInfo(calendarId) {
    let postBody = null; // verify the required parameter 'calendarId' is set

    if (calendarId === undefined || calendarId === null) {
      throw new Error("Missing the required parameter 'calendarId' when calling microsoftListEventsByCalendarId");
    }

    let pathParams = {
      'calendarId': calendarId
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearerAuth'];
    let contentTypes = [];
    let accepts = ['application/vnd.api+json'];
    let returnType = InlineResponse2004;
    return this.apiClient.callApi('/microsoft/calendars/{calendarId}/events', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * List Microsoft events by calendar ID
   * List Microsoft events by calendar ID
   * @param {String} calendarId Calendar ID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}
   */


  microsoftListEventsByCalendarId(calendarId) {
    return this.microsoftListEventsByCalendarIdWithHttpInfo(calendarId).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

}