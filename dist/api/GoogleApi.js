/**
 * Docket API
 * Docket API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: development@docket.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import ClientError from '../model/ClientError';
import InlineResponse200 from '../model/InlineResponse200';
/**
* Google service.
* @module api/GoogleApi
* @version 1.0.0
*/

export default class GoogleApi {
  /**
  * Constructs a new GoogleApi. 
  * @alias module:api/GoogleApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }
  /**
   * Get the OAuth2 URL for Google services
   * Get the OAuth2 URL for Google services
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
   */


  getGoogleOAuthUrlWithHttpInfo() {
    let postBody = null;
    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/vnd.api+json'];
    let returnType = InlineResponse200;
    return this.apiClient.callApi('/google/oauth-url', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Get the OAuth2 URL for Google services
   * Get the OAuth2 URL for Google services
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
   */


  getGoogleOAuthUrl() {
    return this.getGoogleOAuthUrlWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  }
  /**
   * Get Google access tokens
   * Get Google access tokens
   * @param {String} code Code
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  googleGetAccessTokensWithHttpInfo(code) {
    let postBody = null; // verify the required parameter 'code' is set

    if (code === undefined || code === null) {
      throw new Error("Missing the required parameter 'code' when calling googleGetAccessTokens");
    }

    let pathParams = {};
    let queryParams = {
      'code': code
    };
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearerAuth'];
    let contentTypes = [];
    let accepts = ['application/vnd.api+json'];
    let returnType = null;
    return this.apiClient.callApi('/google/tokens', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Get Google access tokens
   * Get Google access tokens
   * @param {String} code Code
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */


  googleGetAccessTokens(code) {
    return this.googleGetAccessTokensWithHttpInfo(code).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
  /**
   * List calendar lists
   * List calendar lists
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  googleListCalendarListsWithHttpInfo() {
    let postBody = null;
    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearerAuth'];
    let contentTypes = [];
    let accepts = ['application/vnd.api+json'];
    let returnType = null;
    return this.apiClient.callApi('/google/calendars-lists', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * List calendar lists
   * List calendar lists
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */


  googleListCalendarLists() {
    return this.googleListCalendarListsWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  }
  /**
   * Get event instances by ID
   * Get event instances by ID
   * @param {String} calendarId Calendar ID
   * @param {String} eventId Event ID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  googleListEventInstancesWithHttpInfo(calendarId, eventId) {
    let postBody = null; // verify the required parameter 'calendarId' is set

    if (calendarId === undefined || calendarId === null) {
      throw new Error("Missing the required parameter 'calendarId' when calling googleListEventInstances");
    } // verify the required parameter 'eventId' is set


    if (eventId === undefined || eventId === null) {
      throw new Error("Missing the required parameter 'eventId' when calling googleListEventInstances");
    }

    let pathParams = {
      'calendarId': calendarId,
      'eventId': eventId
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearerAuth'];
    let contentTypes = [];
    let accepts = ['application/vnd.api+json'];
    let returnType = null;
    return this.apiClient.callApi('/google/calendars/{calendarId}/events/{eventId}/instances', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Get event instances by ID
   * Get event instances by ID
   * @param {String} calendarId Calendar ID
   * @param {String} eventId Event ID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */


  googleListEventInstances(calendarId, eventId) {
    return this.googleListEventInstancesWithHttpInfo(calendarId, eventId).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
  /**
   * List events by calendar ID
   * List events by calendar ID
   * @param {String} calendarId Calendar ID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  googleListEventsByCalendarIdWithHttpInfo(calendarId) {
    let postBody = null; // verify the required parameter 'calendarId' is set

    if (calendarId === undefined || calendarId === null) {
      throw new Error("Missing the required parameter 'calendarId' when calling googleListEventsByCalendarId");
    }

    let pathParams = {
      'calendarId': calendarId
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearerAuth'];
    let contentTypes = [];
    let accepts = ['application/vnd.api+json'];
    let returnType = null;
    return this.apiClient.callApi('/google/calendars/{calendarId}/events', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * List events by calendar ID
   * List events by calendar ID
   * @param {String} calendarId Calendar ID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */


  googleListEventsByCalendarId(calendarId) {
    return this.googleListEventsByCalendarIdWithHttpInfo(calendarId).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
  /**
   * Get calendar by ID
   * Get calendar by ID
   * @param {String} calendarId Calendar ID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  googleShowCalendarByIdWithHttpInfo(calendarId) {
    let postBody = null; // verify the required parameter 'calendarId' is set

    if (calendarId === undefined || calendarId === null) {
      throw new Error("Missing the required parameter 'calendarId' when calling googleShowCalendarById");
    }

    let pathParams = {
      'calendarId': calendarId
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearerAuth'];
    let contentTypes = [];
    let accepts = ['application/vnd.api+json'];
    let returnType = null;
    return this.apiClient.callApi('/google/calendars/{calendarId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Get calendar by ID
   * Get calendar by ID
   * @param {String} calendarId Calendar ID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */


  googleShowCalendarById(calendarId) {
    return this.googleShowCalendarByIdWithHttpInfo(calendarId).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
  /**
   * Get a Google calendar list by ID
   * Get a Google calendar list by ID
   * @param {String} calendarListId Calendar list ID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  googleShowCalendarListByIdWithHttpInfo(calendarListId) {
    let postBody = null; // verify the required parameter 'calendarListId' is set

    if (calendarListId === undefined || calendarListId === null) {
      throw new Error("Missing the required parameter 'calendarListId' when calling googleShowCalendarListById");
    }

    let pathParams = {
      'calendarListId': calendarListId
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearerAuth'];
    let contentTypes = [];
    let accepts = ['application/vnd.api+json'];
    let returnType = null;
    return this.apiClient.callApi('/google/calendars-lists/{calendarListId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Get a Google calendar list by ID
   * Get a Google calendar list by ID
   * @param {String} calendarListId Calendar list ID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */


  googleShowCalendarListById(calendarListId) {
    return this.googleShowCalendarListByIdWithHttpInfo(calendarListId).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
  /**
   * Get event by ID
   * Get event by ID
   * @param {String} calendarId Calendar ID
   * @param {String} eventId Event ID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  googleShowEventByIdWithHttpInfo(calendarId, eventId) {
    let postBody = null; // verify the required parameter 'calendarId' is set

    if (calendarId === undefined || calendarId === null) {
      throw new Error("Missing the required parameter 'calendarId' when calling googleShowEventById");
    } // verify the required parameter 'eventId' is set


    if (eventId === undefined || eventId === null) {
      throw new Error("Missing the required parameter 'eventId' when calling googleShowEventById");
    }

    let pathParams = {
      'calendarId': calendarId,
      'eventId': eventId
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearerAuth'];
    let contentTypes = [];
    let accepts = ['application/vnd.api+json'];
    let returnType = null;
    return this.apiClient.callApi('/google/calendars/{calendarId}/events/{eventId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Get event by ID
   * Get event by ID
   * @param {String} calendarId Calendar ID
   * @param {String} eventId Event ID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */


  googleShowEventById(calendarId, eventId) {
    return this.googleShowEventByIdWithHttpInfo(calendarId, eventId).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
  /**
   * Watch calendar lists
   * Watch calendar lists
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  googleWatchCalendarListsWithHttpInfo() {
    let postBody = null;
    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearerAuth'];
    let contentTypes = [];
    let accepts = ['application/vnd.api+json'];
    let returnType = null;
    return this.apiClient.callApi('/google/calendars-lists/watch', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Watch calendar lists
   * Watch calendar lists
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */


  googleWatchCalendarLists() {
    return this.googleWatchCalendarListsWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  }
  /**
   * Watch events
   * Watch events
   * @param {String} calendarId Calendar ID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  googleWatchEventsWithHttpInfo(calendarId) {
    let postBody = null; // verify the required parameter 'calendarId' is set

    if (calendarId === undefined || calendarId === null) {
      throw new Error("Missing the required parameter 'calendarId' when calling googleWatchEvents");
    }

    let pathParams = {
      'calendarId': calendarId
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearerAuth'];
    let contentTypes = [];
    let accepts = ['application/vnd.api+json'];
    let returnType = null;
    return this.apiClient.callApi('/google/calendars/{calendarId}/events/watch', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Watch events
   * Watch events
   * @param {String} calendarId Calendar ID
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */


  googleWatchEvents(calendarId) {
    return this.googleWatchEventsWithHttpInfo(calendarId).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

}