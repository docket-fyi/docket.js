/**
 * Docket API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Event from '../model/Event';
import MeEventPutRequestBody from '../model/MeEventPutRequestBody';
import MeEventsPostRequestBody from '../model/MeEventsPostRequestBody';

/**
* Event service.
* @module api/EventApi
* @version 0.1.0
*/
export default class EventApi {

    /**
    * Constructs a new EventApi. 
    * @alias module:api/EventApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Creates a new event for the current user
     * 
     * @param {module:model/MeEventsPostRequestBody} meEventsPostRequestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Event} and HTTP response
     */
    createMyEventWithHttpInfo(meEventsPostRequestBody) {
      let postBody = meEventsPostRequestBody;

      // verify the required parameter 'meEventsPostRequestBody' is set
      if (meEventsPostRequestBody === undefined || meEventsPostRequestBody === null) {
        throw new Error("Missing the required parameter 'meEventsPostRequestBody' when calling createMyEvent");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Event;

      return this.apiClient.callApi(
        '/me/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new event for the current user
     * 
     * @param {module:model/MeEventsPostRequestBody} meEventsPostRequestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Event}
     */
    createMyEvent(meEventsPostRequestBody) {
      return this.createMyEventWithHttpInfo(meEventsPostRequestBody);
        /*.then(function(response_and_data) {
          return response_and_data.data;
        });*/
    }


    /**
     * Deletes an event for the current user
     * 
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteMyEventByIdWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMyEventById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/me/events/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes an event for the current user
     * 
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteMyEventById(id) {
      return this.deleteMyEventByIdWithHttpInfo(id);
        /*.then(function(response_and_data) {
          return response_and_data.data;
        });*/
    }


    /**
     * Fetches a specific event for the current user
     * 
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Event} and HTTP response
     */
    getMyEventByIdWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMyEventById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Event;

      return this.apiClient.callApi(
        '/me/events/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Fetches a specific event for the current user
     * 
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Event}
     */
    getMyEventById(id) {
      return this.getMyEventByIdWithHttpInfo(id);
        /*.then(function(response_and_data) {
          return response_and_data.data;
        });*/
    }


    /**
     * Fetches all events for the current user
     * 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    getMyEventsWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];

      return this.apiClient.callApi(
        '/me/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Fetches all events for the current user
     * 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    getMyEvents() {
      return this.getMyEventsWithHttpInfo();
        /*.then(function(response_and_data) {
          return response_and_data.data;
        });*/
    }


    /**
     * Updates an event for the current user
     * 
     * @param {String} id 
     * @param {module:model/MeEventPutRequestBody} meEventPutRequestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Event} and HTTP response
     */
    updateMyEventByIdWithHttpInfo(id, meEventPutRequestBody) {
      let postBody = meEventPutRequestBody;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateMyEventById");
      }

      // verify the required parameter 'meEventPutRequestBody' is set
      if (meEventPutRequestBody === undefined || meEventPutRequestBody === null) {
        throw new Error("Missing the required parameter 'meEventPutRequestBody' when calling updateMyEventById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Event;

      return this.apiClient.callApi(
        '/me/events/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates an event for the current user
     * 
     * @param {String} id 
     * @param {module:model/MeEventPutRequestBody} meEventPutRequestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Event}
     */
    updateMyEventById(id, meEventPutRequestBody) {
      return this.updateMyEventByIdWithHttpInfo(id, meEventPutRequestBody);
        /*.then(function(response_and_data) {
          return response_and_data.data;
        });*/
    }


}
