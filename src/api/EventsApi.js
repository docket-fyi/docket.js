/**
 * Docket API
 * Docket API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: development@docket.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClientError from '../model/ClientError';
import InlineObject1 from '../model/InlineObject1';
import InlineObject2 from '../model/InlineObject2';
import InlineObject3 from '../model/InlineObject3';
import InlineResponse2006 from '../model/InlineResponse2006';
import InlineResponse2007 from '../model/InlineResponse2007';

/**
* Events service.
* @module api/EventsApi
* @version 1.0.0
*/
export default class EventsApi {

    /**
    * Constructs a new EventsApi. 
    * @alias module:api/EventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new event for the current user
     * Create a new event for the current user
     * @param {module:model/InlineObject1} inlineObject1 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response
     */
    createMyEventWithHttpInfo(inlineObject1) {
      let postBody = inlineObject1;
      // verify the required parameter 'inlineObject1' is set
      if (inlineObject1 === undefined || inlineObject1 === null) {
        throw new Error("Missing the required parameter 'inlineObject1' when calling createMyEvent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/vnd.api+json'];
      let accepts = ['application/vnd.api+json'];
      let returnType = InlineResponse2007;
      return this.apiClient.callApi(
        '/my/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new event for the current user
     * Create a new event for the current user
     * @param {module:model/InlineObject1} inlineObject1 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2007}
     */
    createMyEvent(inlineObject1) {
      return this.createMyEventWithHttpInfo(inlineObject1)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an event for the current user by it's ID
     * Delete an event for the current user by it's ID
     * @param {Number} eventId ID of event to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteMyEventByIdWithHttpInfo(eventId) {
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling deleteMyEventById");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/vnd.api+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/events/{eventId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an event for the current user by it's ID
     * Delete an event for the current user by it's ID
     * @param {Number} eventId ID of event to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteMyEventById(eventId) {
      return this.deleteMyEventByIdWithHttpInfo(eventId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an event for the current user by it's ID
     * Get an event for the current user by it's ID
     * @param {Number} eventId ID of event to get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response
     */
    getMyEventByIdWithHttpInfo(eventId) {
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling getMyEventById");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/vnd.api+json'];
      let returnType = InlineResponse2007;
      return this.apiClient.callApi(
        '/my/events/{eventId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get an event for the current user by it's ID
     * Get an event for the current user by it's ID
     * @param {Number} eventId ID of event to get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2007}
     */
    getMyEventById(eventId) {
      return this.getMyEventByIdWithHttpInfo(eventId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Bulk import events for the current user
     * Bulk import events for the current user
     * @param {module:model/InlineObject3} inlineObject3 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2006} and HTTP response
     */
    importMyEventsWithHttpInfo(inlineObject3) {
      let postBody = inlineObject3;
      // verify the required parameter 'inlineObject3' is set
      if (inlineObject3 === undefined || inlineObject3 === null) {
        throw new Error("Missing the required parameter 'inlineObject3' when calling importMyEvents");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/vnd.api+json'];
      let accepts = ['application/vnd.api+json'];
      let returnType = InlineResponse2006;
      return this.apiClient.callApi(
        '/my/events/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Bulk import events for the current user
     * Bulk import events for the current user
     * @param {module:model/InlineObject3} inlineObject3 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2006}
     */
    importMyEvents(inlineObject3) {
      return this.importMyEventsWithHttpInfo(inlineObject3)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the current user's events
     * List the current user's events
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2006} and HTTP response
     */
    listMyEventsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/vnd.api+json'];
      let returnType = InlineResponse2006;
      return this.apiClient.callApi(
        '/my/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List the current user's events
     * List the current user's events
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2006}
     */
    listMyEvents() {
      return this.listMyEventsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an event for the current user by it's ID
     * Update an event for the current user by it's ID
     * @param {Number} eventId ID of event to update
     * @param {module:model/InlineObject2} inlineObject2 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response
     */
    updateMyEventByIdWithHttpInfo(eventId, inlineObject2) {
      let postBody = inlineObject2;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling updateMyEventById");
      }
      // verify the required parameter 'inlineObject2' is set
      if (inlineObject2 === undefined || inlineObject2 === null) {
        throw new Error("Missing the required parameter 'inlineObject2' when calling updateMyEventById");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/vnd.api+json'];
      let accepts = ['application/vnd.api+json'];
      let returnType = InlineResponse2007;
      return this.apiClient.callApi(
        '/my/events/{eventId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an event for the current user by it's ID
     * Update an event for the current user by it's ID
     * @param {Number} eventId ID of event to update
     * @param {module:model/InlineObject2} inlineObject2 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2007}
     */
    updateMyEventById(eventId, inlineObject2) {
      return this.updateMyEventByIdWithHttpInfo(eventId, inlineObject2)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
