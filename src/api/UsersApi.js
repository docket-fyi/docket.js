/**
 * Docket API
 * Docket API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: development@docket.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClientError from '../model/ClientError';
import InlineObject from '../model/InlineObject';
import InlineObject5 from '../model/InlineObject5';
import InlineObject6 from '../model/InlineObject6';
import InlineObject7 from '../model/InlineObject7';
import InlineObject8 from '../model/InlineObject8';
import InlineResponse2005 from '../model/InlineResponse2005';

/**
* Users service.
* @module api/UsersApi
* @version 1.0.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Confirm a new user's registration
     * Confirm a new user's registration
     * @param {String} code Confirm registration code parameter
     * @param {module:model/InlineObject6} inlineObject6 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    confirmRegistrationWithHttpInfo(code, inlineObject6) {
      let postBody = inlineObject6;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling confirmRegistration");
      }
      // verify the required parameter 'inlineObject6' is set
      if (inlineObject6 === undefined || inlineObject6 === null) {
        throw new Error("Missing the required parameter 'inlineObject6' when calling confirmRegistration");
      }

      let pathParams = {
      };
      let queryParams = {
        'code': code
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/vnd.api+json'];
      let accepts = ['application/vnd.api+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/confirm-registration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Confirm a new user's registration
     * Confirm a new user's registration
     * @param {String} code Confirm registration code parameter
     * @param {module:model/InlineObject6} inlineObject6 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    confirmRegistration(code, inlineObject6) {
      return this.confirmRegistrationWithHttpInfo(code, inlineObject6)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new user
     * Create a new user and, if valid, return it
     * @param {module:model/InlineObject5} inlineObject5 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    createUserWithHttpInfo(inlineObject5) {
      let postBody = inlineObject5;
      // verify the required parameter 'inlineObject5' is set
      if (inlineObject5 === undefined || inlineObject5 === null) {
        throw new Error("Missing the required parameter 'inlineObject5' when calling createUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/vnd.api+json'];
      let accepts = ['application/vnd.api+json'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new user
     * Create a new user and, if valid, return it
     * @param {module:model/InlineObject5} inlineObject5 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
     */
    createUser(inlineObject5) {
      return this.createUserWithHttpInfo(inlineObject5)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete the current user
     * Delete the current user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    destroyMyProfileWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/vnd.api+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/profile', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete the current user
     * Delete the current user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    destroyMyProfile() {
      return this.destroyMyProfileWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Facilitates a user to reset their password
     * Facilitates a user to reset their password
     * @param {module:model/InlineObject7} inlineObject7 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    forgotPasswordWithHttpInfo(inlineObject7) {
      let postBody = inlineObject7;
      // verify the required parameter 'inlineObject7' is set
      if (inlineObject7 === undefined || inlineObject7 === null) {
        throw new Error("Missing the required parameter 'inlineObject7' when calling forgotPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/vnd.api+json'];
      let accepts = ['application/vnd.api+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/forgot-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Facilitates a user to reset their password
     * Facilitates a user to reset their password
     * @param {module:model/InlineObject7} inlineObject7 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    forgotPassword(inlineObject7) {
      return this.forgotPasswordWithHttpInfo(inlineObject7)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return the current user's profile
     * Return the current user's profile
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    getMyProfileWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/vnd.api+json'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/my/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Return the current user's profile
     * Return the current user's profile
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
     */
    getMyProfile() {
      return this.getMyProfileWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reset a user's password
     * Reset a user's password
     * @param {String} code Reset password code parameter
     * @param {module:model/InlineObject8} inlineObject8 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    resetPasswordWithHttpInfo(code, inlineObject8) {
      let postBody = inlineObject8;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling resetPassword");
      }
      // verify the required parameter 'inlineObject8' is set
      if (inlineObject8 === undefined || inlineObject8 === null) {
        throw new Error("Missing the required parameter 'inlineObject8' when calling resetPassword");
      }

      let pathParams = {
      };
      let queryParams = {
        'code': code
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/vnd.api+json'];
      let accepts = ['application/vnd.api+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/reset-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reset a user's password
     * Reset a user's password
     * @param {String} code Reset password code parameter
     * @param {module:model/InlineObject8} inlineObject8 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    resetPassword(code, inlineObject8) {
      return this.resetPasswordWithHttpInfo(code, inlineObject8)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the current user's membership status
     * Get the current user's membership status
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    showMyMembershipWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/vnd.api+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/membership', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the current user's membership status
     * Get the current user's membership status
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    showMyMembership() {
      return this.showMyMembershipWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the current user's membership status
     * Update the current user's membership status
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateMyMembershipWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/vnd.api+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/membership', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the current user's membership status
     * Update the current user's membership status
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateMyMembership() {
      return this.updateMyMembershipWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the current user's profile
     * Update the current user's profile
     * @param {module:model/InlineObject} inlineObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    updateMyProfileWithHttpInfo(inlineObject) {
      let postBody = inlineObject;
      // verify the required parameter 'inlineObject' is set
      if (inlineObject === undefined || inlineObject === null) {
        throw new Error("Missing the required parameter 'inlineObject' when calling updateMyProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/vnd.api+json'];
      let accepts = ['application/vnd.api+json'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/my/profile', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the current user's profile
     * Update the current user's profile
     * @param {module:model/InlineObject} inlineObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
     */
    updateMyProfile(inlineObject) {
      return this.updateMyProfileWithHttpInfo(inlineObject)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
